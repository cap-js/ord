diff --git a/README.md b/README.md
index 9e3df02..eabe62c 100644
--- a/README.md
+++ b/README.md
@@ -11,7 +11,6 @@ You can use this information to construct a static metadata catalog or to perfor
 For more information, have a look at the [Open Resource Discovery](https://sap.github.io/open-resource-discovery/) page.
 
 > âš  By installing this plugin, the metadata describing your CAP application will be made openly accessible. If you want to secure your CAP application's metadata, configure `basic` authentication by setting the environment variables or updating the `.cdsrc.json` file. The plugin prioritizes environment variables, then checks `.cdsrc.json`. If neither is configured, metadata remains publicly accessible.
->
 
 ## Requirements and Setup
 
@@ -25,8 +24,8 @@ npm install @cap-js/ord
 
 To enforce authentication in the ORD Plugin, set the following environment variables:
 
-* `ORD_AUTH_TYPE`: Specifies the authentication types.
-* `BASIC_AUTH`: Contains credentials for `basic` authentication.
+-   `ORD_AUTH_TYPE`: Specifies the authentication types.
+-   `BASIC_AUTH`: Contains credentials for `basic` authentication.
 
 If `ORD_AUTH_TYPE` is not set, the application starts without authentication. This variable accepts `open` and `basic` (UCL-mTLS is also planned).
 > Note: `open` cannot be combined with `basic` or any other (future) authentication types.
@@ -35,12 +34,12 @@ If `ORD_AUTH_TYPE` is not set, the application starts without authentication. Th
 
 The `open` authentication type bypasses authentication checks.
 
-#### Basic
+#### Basic Authentication
 
-To use `basic` authentication, set `ORD_AUTH_TYPE` to `["basic"]` and provide credentials in `BASIC_AUTH`. Example:
+The server supports Basic Authentication through an environment variable that contains a JSON string mapping usernames to bcrypt-hashed passwords:
 
 ```bash
-BASIC_AUTH='{"user":"password"}'
+BASIC_AUTH='{"admin":"$2y$05$TjeC./ljKi7VLTBbzjTVyOi6lQBYpzfXiZSfJiGECHVi0eEN6/QG."}'
 ```
 
 Alternatively, configure authentication in `.cdsrc.json`:
@@ -49,11 +48,53 @@ Alternatively, configure authentication in `.cdsrc.json`:
 "authentication": {
     "types": ["basic"],
     "credentials": {
-        "user": "password"
+        "admin": "$2y$05$TjeC./ljKi7VLTBbzjTVyOi6lQBYpzfXiZSfJiGECHVi0eEN6/QG."
     }
 }
 ```
 
+To generate bcrypt hashes, use the [htpasswd](https://httpd.apache.org/docs/2.4/programs/htpasswd.html) utility:
+
+```bash
+htpasswd -Bnb <user> <password>
+```
+
+This will output something like `admin:$2y$05$...` - use only the hash part (starting with `$2y$`) in your `BASIC_AUTH` JSON.
+
+> [!IMPORTANT]
+> Make sure to use strong passwords and handle the BASIC_AUTH environment variable securely. Never commit real credentials or .env files to version control.
+
+<details>
+<summary>Using htpasswd in your environment</summary>
+
+-   **Platform independent**:
+
+    > Prerequisite is to have [NodeJS](https://nodejs.org/en) installed on the machine.
+
+    ```bash
+    npm install -g htpasswd
+    ```
+
+    After installing package globally, command `htpasswd` should be available in the Terminal.
+
+-   **macOS**:
+
+    Installation of any additional packages is not required. Utility `htpasswd` is available in Terminal by default.
+
+-   **Linux**:
+
+    Install apache2-utils package:
+
+    ```bash
+    # Debian/Ubuntu
+    sudo apt-get install apache2-utils
+
+    # RHEL/CentOS
+    sudo yum install httpd-tools
+    ```
+
+</details>
+
 ### Usage
 
 #### Programmatic API
diff --git a/__tests__/unittest/authentication.test.js b/__tests__/unittest/authentication.test.js
index da95435..f387338 100644
--- a/__tests__/unittest/authentication.test.js
+++ b/__tests__/unittest/authentication.test.js
@@ -4,16 +4,17 @@ const { authenticate, createAuthConfig, getAuthConfig } = require('../../lib/aut
 const { Logger } = require('../../lib/logger');
 
 describe('authentication', () => {
-    const mockValidUser = { admin: "secret" };
+    // The bcrypt hash decrypted is: secret
+    const mockValidUser = { admin: '$2a$05$cx46X.uaat9Az0XLfc8.BuijktdnHrIvtRMXnLdhozqo.1Eeo7.ZW' };
     const defaultAuthConfig = {
         types: [AUTHENTICATION_TYPE.Open],
-        accessStrategies: [{ type: AUTHENTICATION_TYPE.Open }]
+        accessStrategies: [{ type: AUTHENTICATION_TYPE.Open }],
     };
 
     cds.context = {
         authConfig: {
-            types: [AUTHENTICATION_TYPE.Open]
-        }
+            types: [AUTHENTICATION_TYPE.Open],
+        },
     };
 
     beforeAll(() => {
@@ -24,16 +25,25 @@ describe('authentication', () => {
         jest.restoreAllMocks();
     });
 
-    function authCheck(req, status, message, header) {
+    async function authCheck(req, status, message, header) {
         const res = {
-            status: jest.fn().mockImplementation(value => { res.status = value; return res; }),
-            setHeader: jest.fn().mockImplementation((key, value) => { res.header = { [key]: value }; return res; }),
+            status: jest.fn().mockImplementation((value) => {
+                res.status = value;
+                return res;
+            }),
+            setHeader: jest.fn().mockImplementation((key, value) => {
+                res.header = { [key]: value };
+                return res;
+            }),
             end: jest.fn(),
-            send: jest.fn().mockImplementation(message => { res.message = message; return res; })
+            send: jest.fn().mockImplementation((message) => {
+                res.message = message;
+                return res;
+            }),
         };
         const next = jest.fn();
 
-        authenticate(req, res, next);
+        await authenticate(req, res, next);
 
         if (status) {
             expect(res.status).toBe(status);
@@ -64,10 +74,12 @@ describe('authentication', () => {
         it('should return default configuration when no authentication type is provided', () => {
             const authConfig = createAuthConfig();
             expect(authConfig).toEqual(defaultAuthConfig);
-            expect(Logger.error).toHaveBeenCalledWith('createAuthConfig:', 'No authorization type is provided. Defaulting to "Open" authentication');
+            expect(Logger.error).toHaveBeenCalledWith(
+                'createAuthConfig:',
+                'No authorization type is provided. Defaulting to "Open" authentication'
+            );
         });
 
-
         it('should return configuration when Open authentication type is provided', () => {
             process.env.ORD_AUTH_TYPE = `["${AUTHENTICATION_TYPE.Open}"]`;
             const authConfig = createAuthConfig();
@@ -83,7 +95,9 @@ describe('authentication', () => {
         it('should return default configuration with error when Open and Basic authentication types are combined', () => {
             process.env.ORD_AUTH_TYPE = `["${AUTHENTICATION_TYPE.Open}", "${AUTHENTICATION_TYPE.Basic}"]`;
             const authConfig = createAuthConfig();
-            expect(authConfig.error).toEqual('Open authentication cannot be combined with any other authentication type');
+            expect(authConfig.error).toEqual(
+                'Open authentication cannot be combined with any other authentication type'
+            );
         });
 
         it('should return default configuration with error when invalid JSON is provided', () => {
@@ -106,10 +120,7 @@ describe('authentication', () => {
             expect(authConfig).toEqual({
                 types: [AUTHENTICATION_TYPE.Basic],
                 accessStrategies: [{ type: ORD_ACCESS_STRATEGY.Basic }],
-                credentials: {
-                    username: "admin",
-                    password: mockValidUser["admin"]
-                }
+                credentials: mockValidUser,
             });
         });
 
@@ -120,10 +131,7 @@ describe('authentication', () => {
             expect(authConfig).toEqual({
                 types: [AUTHENTICATION_TYPE.Basic],
                 accessStrategies: [{ type: ORD_ACCESS_STRATEGY.Basic }],
-                credentials: {
-                    username: "admin",
-                    password: mockValidUser["admin"]
-                }
+                credentials: mockValidUser,
             });
         });
     });
@@ -137,8 +145,8 @@ describe('authentication', () => {
 
         it('should return auth config from cds.context if provided', () => {
             cds.context = {
-                authConfig: defaultAuthConfig
-            }
+                authConfig: defaultAuthConfig,
+            };
             const authConfig = getAuthConfig();
             expect(authConfig).toEqual(cds.context.authConfig);
         });
@@ -170,87 +178,81 @@ describe('authentication', () => {
         });
     });
 
-    describe("Authentication middleware", () => {
+    describe('Authentication middleware', () => {
         afterEach(() => {
             delete process.env.ORD_AUTH_TYPE;
             delete process.env.BASIC_AUTH;
-            cds.env.authentication = {}
+            cds.env.authentication = {};
             cds.context.authConfig = {};
         });
 
-        it("should have access with default open authentication", async () => {
-            authCheck({ headers: {} }, 200);
+        it('should have access with default open authentication', async () => {
+            await authCheck({ headers: {} }, 200);
         });
 
-        it("should not authenticate because of missing authorization header in case of any non-open authentication", async () => {
+        it('should not authenticate because of missing authorization header in case of any non-open authentication', async () => {
             cds.context.authConfig.types = [AUTHENTICATION_TYPE.Basic];
             const req = {
-                headers: {}
+                headers: {},
             };
 
-            authCheck(req, 401, "Authentication required.");
+            await authCheck(req, 401, 'Authentication required.');
         });
 
         it("should not authenticate and set header 'WWW-Authenticate' because of missing authorization header", async () => {
             cds.context.authConfig.types = [AUTHENTICATION_TYPE.Basic];
             const req = {
-                headers: {}
+                headers: {},
             };
 
-            authCheck(req, 401, "Authentication required.", "401");
+            await authCheck(req, 401, 'Authentication required.', '401');
         });
 
-        it("should not authenticate because of wrongly configured unsupported authentication type", async () => {
-            cds.context.authConfig.types = "UnsupportedAuthType";
+        it('should not authenticate because of wrongly configured unsupported authentication type', async () => {
+            cds.context.authConfig.types = 'UnsupportedAuthType';
             const req = {
-                headers: {}
+                headers: {},
             };
 
-            authCheck(req, 401, "Not authorized");
+            await authCheck(req, 401, 'Not authorized');
         });
 
-        it("should not authenticate because of invalid name of authentication type in the request header", async () => {
+        it('should not authenticate because of invalid name of authentication type in the request header', async () => {
             cds.context.authConfig.types = [AUTHENTICATION_TYPE.Basic];
             const req = {
                 headers: {
-                    authorization: "Invalid " + Buffer.from(`invalid`).toString("base64")
-                }
+                    authorization: 'Invalid ' + Buffer.from(`invalid`).toString('base64'),
+                },
             };
-            authCheck(req, 401, "Invalid authentication type");
+            await authCheck(req, 401, 'Invalid authentication type');
         });
 
-        it("should authenticate with valid credentials in the request", async () => {
+        it('should authenticate with valid credentials in the request', async () => {
             cds.context.authConfig = {
                 types: [AUTHENTICATION_TYPE.Basic],
-                credentials: {
-                    username: "admin",
-                    password: "secret"
-                }
+                credentials: mockValidUser,
             };
 
             const req = {
                 headers: {
-                    authorization: "Basic " + Buffer.from(`admin:${mockValidUser["admin"]}`).toString("base64")
-                }
+                    authorization: 'Basic ' + Buffer.from('admin:secret').toString('base64'),
+                },
             };
-            authCheck(req, 200);
+            await authCheck(req, 200);
         });
 
-        it("should not authenticate because of invalid credentials in the request", async () => {
+        it('should not authenticate because of invalid credentials in the request', async () => {
             cds.context.authConfig = {
                 types: [AUTHENTICATION_TYPE.Basic],
-                credentials: {
-                    username: "admin",
-                    password: "secret"
-                }
+                credentials: mockValidUser,
             };
 
             const req = {
                 headers: {
-                    authorization: "Basic " + Buffer.from("invalid:invalid").toString("base64")
-                }
+                    authorization: 'Basic ' + Buffer.from('invalid:invalid').toString('base64'),
+                },
             };
-            authCheck(req, 401, "Invalid credentials");
+            await authCheck(req, 401, 'Invalid credentials');
         });
     });
-});
\ No newline at end of file
+});
diff --git a/lib/authentication.js b/lib/authentication.js
index f3f9fcc..2c7a4e5 100644
--- a/lib/authentication.js
+++ b/lib/authentication.js
@@ -1,6 +1,29 @@
-const cds = require("@sap/cds");
-const { AUTHENTICATION_TYPE, BASIC_AUTH_HEADER_KEY, AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP } = require("./constants");
-const { Logger } = require("./logger");
+const cds = require('@sap/cds');
+const bcrypt = require('bcrypt');
+const { AUTHENTICATION_TYPE, BASIC_AUTH_HEADER_KEY, AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP } = require('./constants');
+const { Logger } = require('./logger');
+
+/**
+ * Compares a plain text password with a hashed password
+ * @param {string} password Plain text password to check
+ * @param {string} hashedPassword Hashed password to compare against
+ * @returns {Promise<boolean>} Promise resolving to true if passwords match, false otherwise
+ */
+async function comparePassword(password, hashedPassword) {
+    if (!password || !hashedPassword) {
+        throw new Error('Password and hashed password are required');
+    }
+    return await bcrypt.compare(password, hashedPassword.replace(/^\$2y/, '$2a'));
+}
+
+/**
+ * Validates if a string is a bcrypt hash
+ * @param {string} hash String to validate
+ * @returns {boolean} boolean indicating if the string is a bcrypt hash
+ */
+function isBcryptHash(hash) {
+    return /^\$2[ayb]\$\d{2}\$[A-Za-z0-9./]{53}$/.test(hash);
+}
 
 /**
  * Create authentication configuration based on data given in the environment variables.
@@ -9,39 +32,54 @@ const { Logger } = require("./logger");
 function createAuthConfig() {
     const defaultAuthConfig = {
         types: [AUTHENTICATION_TYPE.Open],
-        accessStrategies: [{ type: AUTHENTICATION_TYPE.Open }]
+        accessStrategies: [{ type: AUTHENTICATION_TYPE.Open }],
     };
 
     try {
         const authConfig = {};
 
-        authConfig.types = process.env.ORD_AUTH_TYPE ?
-            [...new Set(JSON.parse(process.env.ORD_AUTH_TYPE))] :
-            [...new Set(cds.env.authentication?.types)];
+        authConfig.types = process.env.ORD_AUTH_TYPE
+            ? [...new Set(JSON.parse(process.env.ORD_AUTH_TYPE))]
+            : [...new Set(cds.env.authentication?.types)];
 
         if (!authConfig.types || authConfig.types.length === 0) {
             Logger.error('createAuthConfig:', 'No authorization type is provided. Defaulting to "Open" authentication');
             return defaultAuthConfig;
         }
 
-        if (authConfig.types.some(authType => !Object.values(AUTHENTICATION_TYPE).includes(authType))) {
+        if (authConfig.types.some((authType) => !Object.values(AUTHENTICATION_TYPE).includes(authType))) {
             return Object.assign(defaultAuthConfig, { error: 'Invalid authentication type' });
         }
 
-        if (authConfig.types.includes(AUTHENTICATION_TYPE.Open) && authConfig.types.includes(AUTHENTICATION_TYPE.Basic)) {
-            return Object.assign(defaultAuthConfig, { error: 'Open authentication cannot be combined with any other authentication type' });
+        if (
+            authConfig.types.includes(AUTHENTICATION_TYPE.Open) &&
+            authConfig.types.includes(AUTHENTICATION_TYPE.Basic)
+        ) {
+            return Object.assign(defaultAuthConfig, {
+                error: 'Open authentication cannot be combined with any other authentication type',
+            });
         }
 
         if (authConfig.types.includes(AUTHENTICATION_TYPE.Basic)) {
-            const credentials = process.env.BASIC_AUTH ? JSON.parse(process.env.BASIC_AUTH) : cds.env.authentication.credentials;
-            authConfig.credentials = Object.entries(credentials).map(([username, password]) => ({
-                username, password
-            }))[0];
+            const credentials = process.env.BASIC_AUTH
+                ? JSON.parse(process.env.BASIC_AUTH)
+                : cds.env.authentication.credentials;
+
+            // Check all passwords in credentials map
+            for (const [username, password] of Object.entries(credentials)) {
+                if (!isBcryptHash(password)) {
+                    Logger.error('createAuthConfig:', `Password for user "${username}" must be a bcrypt hash`);
+                    return Object.assign(defaultAuthConfig, { error: 'All passwords must be bcrypt hashes' });
+                }
+            }
+
+            // Store the complete credentials map
+            authConfig.credentials = credentials;
         }
 
-        authConfig.accessStrategies = authConfig.types.map(type => ({
-            type: AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP[type]
-        }))
+        authConfig.accessStrategies = authConfig.types.map((type) => ({
+            type: AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP[type],
+        }));
         return authConfig;
     } catch (error) {
         return Object.assign(defaultAuthConfig, { error: error.message });
@@ -63,9 +101,9 @@ function getAuthConfig() {
 
     // set the context
     cds.context = {
-        authConfig
-    }
-    return cds.context?.authConfig
+        authConfig,
+    };
+    return cds.context?.authConfig;
 }
 
 /**
@@ -79,7 +117,10 @@ async function authenticate(req, res, next) {
         return next();
     }
 
-    if (!Object.keys(req.headers).includes(BASIC_AUTH_HEADER_KEY) && authConfig.types.includes(AUTHENTICATION_TYPE.Basic)) {
+    if (
+        !Object.keys(req.headers).includes(BASIC_AUTH_HEADER_KEY) &&
+        authConfig.types.includes(AUTHENTICATION_TYPE.Basic)
+    ) {
         return res.status(401).setHeader('WWW-Authenticate', 'Basic realm="401"').send('Authentication required.');
     }
 
@@ -92,7 +133,9 @@ async function authenticate(req, res, next) {
 
         const [username, password] = Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':');
         const credentials = authConfig.credentials;
-        if (username === credentials?.username && password === credentials?.password) {
+        const storedPassword = credentials[username];
+
+        if (storedPassword && (await comparePassword(password, storedPassword))) {
             res.status(200);
             return next();
         } else {
@@ -108,5 +151,7 @@ async function authenticate(req, res, next) {
 module.exports = {
     authenticate,
     createAuthConfig,
-    getAuthConfig
-};
\ No newline at end of file
+    getAuthConfig,
+    comparePassword,
+    isBcryptHash,
+};
diff --git a/package.json b/package.json
index dc3a665..36725e4 100644
--- a/package.json
+++ b/package.json
@@ -29,6 +29,7 @@
         "@sap/cds-compiler": "5.0.6"
     },
     "dependencies": {
+        "bcrypt": "^5.1.1",
         "lodash": "^4.17.21"
     }
-}
\ No newline at end of file
+}
diff --git a/xmpl/.cdsrc.json b/xmpl/.cdsrc.json
index 743f0fe..0fe46cf 100644
--- a/xmpl/.cdsrc.json
+++ b/xmpl/.cdsrc.json
@@ -19,7 +19,7 @@
     "authentication": {
         "types": ["basic"],
         "credentials": {
-            "admin": "secret"
+            "admin": "$2a$05$cx46X.uaat9Az0XLfc8.BuijktdnHrIvtRMXnLdhozqo.1Eeo7.ZW"
         }
     }
 }
diff --git a/xmpl/default-env.json b/xmpl/default-env.json
index 391ed96..3b6e497 100644
--- a/xmpl/default-env.json
+++ b/xmpl/default-env.json
@@ -1,11 +1,11 @@
 {
-  "SERVER_HOST": "0.0.0.0",
-  "SERVER_PORT": 8080,
-  "ORD_BASE_URL": "http://localhost:8080",
-  "ORD_SOURCE_TYPE": "local",
-  "ORD_DIRECTORY": "./example",
-  "ORD_AUTH_TYPE": ["basic"],
-  "BASIC_AUTH": {
-	"admin": "secret"
-  }
+    "SERVER_HOST": "0.0.0.0",
+    "SERVER_PORT": 8080,
+    "ORD_BASE_URL": "http://localhost:8080",
+    "ORD_SOURCE_TYPE": "local",
+    "ORD_DIRECTORY": "./example",
+    "ORD_AUTH_TYPE": ["basic"],
+    "BASIC_AUTH": {
+        "admin": "$2a$05$cx46X.uaat9Az0XLfc8.BuijktdnHrIvtRMXnLdhozqo.1Eeo7.ZW"
+    }
 }
