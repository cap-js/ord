diff a/lib/authentication.js b/lib/authentication.js	(rejected hunks)
@@ -1,6 +1,29 @@
-const cds = require("@sap/cds");
-const { AUTHENTICATION_TYPE, BASIC_AUTH_HEADER_KEY, AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP } = require("./constants");
-const { Logger } = require("./logger");
+const cds = require('@sap/cds');
+const bcrypt = require('bcrypt');
+const { AUTHENTICATION_TYPE, BASIC_AUTH_HEADER_KEY, AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP } = require('./constants');
+const { Logger } = require('./logger');
+
+/**
+ * Compares a plain text password with a hashed password
+ * @param {string} password Plain text password to check
+ * @param {string} hashedPassword Hashed password to compare against
+ * @returns {Promise<boolean>} Promise resolving to true if passwords match, false otherwise
+ */
+async function comparePassword(password, hashedPassword) {
+    if (!password || !hashedPassword) {
+        throw new Error('Password and hashed password are required');
+    }
+    return await bcrypt.compare(password, hashedPassword.replace(/^\$2y/, '$2a'));
+}
+
+/**
+ * Validates if a string is a bcrypt hash
+ * @param {string} hash String to validate
+ * @returns {boolean} boolean indicating if the string is a bcrypt hash
+ */
+function isBcryptHash(hash) {
+    return /^\$2[ayb]\$\d{2}\$[A-Za-z0-9./]{53}$/.test(hash);
+}
 
 /**
  * Create authentication configuration based on data given in the environment variables.
@@ -9,39 +32,54 @@ const { Logger } = require("./logger");
 function createAuthConfig() {
     const defaultAuthConfig = {
         types: [AUTHENTICATION_TYPE.Open],
-        accessStrategies: [{ type: AUTHENTICATION_TYPE.Open }]
+        accessStrategies: [{ type: AUTHENTICATION_TYPE.Open }],
     };
 
     try {
         const authConfig = {};
 
-        authConfig.types = process.env.ORD_AUTH_TYPE ?
-            [...new Set(JSON.parse(process.env.ORD_AUTH_TYPE))] :
-            [...new Set(cds.env.authentication?.types)];
+        authConfig.types = process.env.ORD_AUTH_TYPE
+            ? [...new Set(JSON.parse(process.env.ORD_AUTH_TYPE))]
+            : [...new Set(cds.env.authentication?.types)];
 
         if (!authConfig.types || authConfig.types.length === 0) {
             Logger.error('createAuthConfig:', 'No authorization type is provided. Defaulting to "Open" authentication');
             return defaultAuthConfig;
         }
 
-        if (authConfig.types.some(authType => !Object.values(AUTHENTICATION_TYPE).includes(authType))) {
+        if (authConfig.types.some((authType) => !Object.values(AUTHENTICATION_TYPE).includes(authType))) {
             return Object.assign(defaultAuthConfig, { error: 'Invalid authentication type' });
         }
 
-        if (authConfig.types.includes(AUTHENTICATION_TYPE.Open) && authConfig.types.includes(AUTHENTICATION_TYPE.Basic)) {
-            return Object.assign(defaultAuthConfig, { error: 'Open authentication cannot be combined with any other authentication type' });
+        if (
+            authConfig.types.includes(AUTHENTICATION_TYPE.Open) &&
+            authConfig.types.includes(AUTHENTICATION_TYPE.Basic)
+        ) {
+            return Object.assign(defaultAuthConfig, {
+                error: 'Open authentication cannot be combined with any other authentication type',
+            });
         }
 
         if (authConfig.types.includes(AUTHENTICATION_TYPE.Basic)) {
-            const credentials = process.env.BASIC_AUTH ? JSON.parse(process.env.BASIC_AUTH) : cds.env.authentication.credentials;
-            authConfig.credentials = Object.entries(credentials).map(([username, password]) => ({
-                username, password
-            }))[0];
+            const credentials = process.env.BASIC_AUTH
+                ? JSON.parse(process.env.BASIC_AUTH)
+                : cds.env.authentication.credentials;
+
+            // Check all passwords in credentials map
+            for (const [username, password] of Object.entries(credentials)) {
+                if (!isBcryptHash(password)) {
+                    Logger.error('createAuthConfig:', `Password for user "${username}" must be a bcrypt hash`);
+                    return Object.assign(defaultAuthConfig, { error: 'All passwords must be bcrypt hashes' });
+                }
+            }
+
+            // Store the complete credentials map
+            authConfig.credentials = credentials;
         }
 
-        authConfig.accessStrategies = authConfig.types.map(type => ({
-            type: AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP[type]
-        }))
+        authConfig.accessStrategies = authConfig.types.map((type) => ({
+            type: AUTH_TYPE_ORD_ACCESS_STRATEGY_MAP[type],
+        }));
         return authConfig;
     } catch (error) {
         return Object.assign(defaultAuthConfig, { error: error.message });
@@ -63,9 +101,9 @@ function getAuthConfig() {
 
     // set the context
     cds.context = {
-        authConfig
-    }
-    return cds.context?.authConfig
+        authConfig,
+    };
+    return cds.context?.authConfig;
 }
 
 /**
@@ -79,7 +117,10 @@ async function authenticate(req, res, next) {
         return next();
     }
 
-    if (!Object.keys(req.headers).includes(BASIC_AUTH_HEADER_KEY) && authConfig.types.includes(AUTHENTICATION_TYPE.Basic)) {
+    if (
+        !Object.keys(req.headers).includes(BASIC_AUTH_HEADER_KEY) &&
+        authConfig.types.includes(AUTHENTICATION_TYPE.Basic)
+    ) {
         return res.status(401).setHeader('WWW-Authenticate', 'Basic realm="401"').send('Authentication required.');
     }
 
@@ -92,7 +133,9 @@ async function authenticate(req, res, next) {
 
         const [username, password] = Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':');
         const credentials = authConfig.credentials;
-        if (username === credentials?.username && password === credentials?.password) {
+        const storedPassword = credentials[username];
+
+        if (storedPassword && (await comparePassword(password, storedPassword))) {
             res.status(200);
             return next();
         } else {
@@ -108,5 +151,7 @@ async function authenticate(req, res, next) {
 module.exports = {
     authenticate,
     createAuthConfig,
-    getAuthConfig
-};
\ No newline at end of file
+    getAuthConfig,
+    comparePassword,
+    isBcryptHash,
+};
